apiVersion: spinnaker.armory.io/v1alpha2
kind: SpinnakerService
metadata:
  name: spinnaker
  namespace: spinnaker
spec:
  kustomize:
    kayenta:
      deployment:
        patchesStrategicMerge:
          - |
            spec:
              template:
                spec:
                  ## not really needed since we set below
                  containers:
                    - name: kayenta
                      livenessProbe:
                        initialDelaySeconds: 160
  spinnakerConfig:
    config:
      armory:
        terraform:
          enabled:
            true
        diagnostics:
          uuid: jason-mcintosh-local
          enabled: false
          logging:
            enabled: false
            endpoint: https://debug.armory.io/v1/logs
      artifacts:
        helm:
          enabled: true
          accounts:
          - name: helm-hashicorp
            repository: https://helm.releases.hashicorp.com
        gitrepo:
          enabled: true
          accounts:
          - name: github-repo-clone-ro
            username: jasonmcintosh
            token: encrypted:k8s!n:artifact-creds!k:githubReadOnlyToken
        github:
          enabled: true
          accounts:
            ## For loading a SINGLE file using github API's
            - name: github-files-jm
              username: jasonmcintosh
              token: encrypted:k8s!n:artifact-creds!k:githubReadOnlyToken
      deploymentEnvironment:
        customSizing:
          spin-clouddriver:
            limits:
              memory: 2Gi
            replicas: 2
          spin-gate:
            limits:
              memory: 2Gi
          spin-rosco:
            limits:
              memory: 1Gi
          spin-front50:
            limits:
              memory: 2Gi
            replicas: 2
          spin-orca:
            limits:
              memory: 2Gi
          spin-igor:
            limits:
              memory: 2Gi
          spin-echo:
            limits:
              memory: 2Gi
            replicas: 1
          spin-fiat:
            limits:
              memory: 2Gi
            replicas: 1
          spin-kayenta:
            limits:
              memory: 2.5Gi
          spin-terraformer:
            limits:
              memory: .5Gi

        sidecars:
          orca: &opa-client-config
            - name: opal-client
              dockerImage: permitio/opal-client:latest
              env:
                OPAL_SERVER_URL: http://opa-opal-server:7002
                OPAL_POLICY_SUBSCRIPTION_DIRS: applications/opa/
              ## IF we switch to a more advanced sidecar config, we can open up BOTH opa and opal ports.  Opal sidecar runs both it seems
              port: 8181
          front50: *opa-client-config
          clouddriver: *opa-client-config
          gate: *opa-client-config

          ## Example init container for an APM agent (honeycomb, newrelic, etc.)
        initContainers:
          clouddriver: &apmInitConfig
          - command:
            - /bin/sh
            - -c
            - mkdir -p /opt/apmagent && cp /javaagent.jar /opt/apmagent/javaagent.jar && chmod 775 /opt/apmagent/*
            image: otel/autoinstrumentation-java:2.3.0
            imagePullPolicy: Always
            name: apm-initializer
            volumeMounts:
            - mountPath: /opt/apmagent
              name: shared-volume
          echo: *apmInitConfig
          fiat: *apmInitConfig
          front50: *apmInitConfig
          gate: *apmInitConfig
          igor: *apmInitConfig
          kayenta: *apmInitConfig
          orca: *apmInitConfig
          rosco: *apmInitConfig
      canary:
        enabled: true
        defaultMetricsAccount: local-prometheus
        defaultStorageAccount: minio
        defaultMetricsStore: prometheus
        serviceIntegrations:
          - name: aws
            enabled: true
            s3Enabled: true
            accounts:
            - name: minio
              bucket: canaries
              endpoint: http://minio:9000
              accessKeyId: minio
              secretAccessKey: secretKey
              supportedTypes:
              - OBJECT_STORE
              - CONFIGURATION_STORE
          - name: prometheus
            enabled: true
            accounts:
            - name: local-prometheus
              endpoint:
                baseUrl: http://prometheus.monitoring:9090
              supportedTypes:
              - METRICS_STORE
            - name: local-prometheus-2
              endpoint:
                baseUrl: http://prometheus.monitoring:9090
              supportedTypes:
              - METRICS_STORE

      persistentStorage:
        persistentStoreType: s3

      features:
        artifacts: true
        pipelineTemplates: true
      notifications:
        github-status:
          enabled: true
          token: encrypted:k8s!n:artifact-creds!k:githubReadOnlyToken

      providers:
        ## Forces igor to be built...
        dockerRegistry:
          enabled: true

        kubernetes:
          enabled: true
          primaryAccount: k8s-namespace-dev
          accounts:
            - name: k8s-spinnaker-prod
              kubeconfigFile: encryptedFile:k8s!n:kubeconfig!k:kubeconfig
              namespaces: 
              - spinnaker
              permissions:
                READ:
                - everyone
                - engineering-managed
                WRITE:
                - everyone
                - engineering-managed
            - name: k8s-namespace-prod
              kubeconfigFile: encryptedFile:k8s!n:kubeconfig!k:kubeconfig
              namespaces: 
              - prod
              permissions:
                READ:
                - everyone
                - engineering-managed
                WRITE:
                - engineering-managed
            - name: k8s-namespace-dev
              kubeconfigFile: encryptedFile:k8s!n:kubeconfig!k:kubeconfig
              namespaces: 
              - dev
              permissions:
                READ:
                - everyone
                - engineering-managed
                WRITE:
                - everyone
                - engineering-managed
      security:
        apiSecurity:
          overrideBaseUrl: https://spinnaker.mcintosh.farm/api/v1
          ssl:
            enabled: false
        authn:
          enabled: true
          oauth2:
            enabled: true
            provider: OTHER
        authz:
          enabled: true
          groupMembership:
            service: EXTERNAL
        uiSecurity:
          overrideBaseUrl: https://spinnaker.mcintosh.farm
          ssl:
            enabled: false
      stats:
        enabled: false
        instanceId: disable-echo-always-recreating
      telemetry:
        connectionTimeoutMillis: 3000
        enabled: true
        endpoint: https://stats.spinnaker.io
        instanceId: e20da5f8-286e-46c2-8d79-4c131d0707c4
        readTimeoutMillis: 5000
      timezone: America/Chicago
      version: 2.34.0
      webhook:
        trust:
          enabled: false
    profiles:
      clouddriver:
        kubernetes:
          loadNamespacesInAccount: false
          verifyAccountHealth: false
        ## done here... Maybe could move to providers block... hit some ODD issues with halyard validation this though :( 
        docker-registry:
          enabled: true
          accounts:
          - name: docker-ghcr-jasonmcintosh
            address: https://ghcr.io/
            username: jasonmcintosh
            password: encrypted:k8s!n:artifact-creds!k:githubPatToken
            repositories:
            - jasonmcintosh/spinnaker-work/demo-web-app
        credentials:
          poller:
            enabled: true
        redis:
          cache:
            enabled: false
          enabled: false
          scheduler:
            enabled: false
          taskRepository:
            enabled: false
        serviceLimits:
          cloudProviderOverrides:
            aws:
              rateLimit: 10
          implementationLimits:
            AmazonAutoScaling:
              defaults:
                rateLimit: 3
            AmazonElasticLoadBalancing:
              defaults:
                rateLimit: 5
        sql:
          agent:
            enabledPattern: .*
          cache:
            enabled: true
            readBatchSize: 100
            writeBatchSize: 100
          connectionPools:
            default:
              default: true
              jdbcUrl: jdbc:mysql://mysql:3306/clouddriver
              password: password
              user: root
          enabled: true
          migration:
            jdbcUrl: jdbc:mysql://mysql:3306/clouddriver
            password: password
            user: root
          scheduler:
            enabled: true
          taskRepository:
            enabled: true
          unknown-agent-cleanup-agent:
            enabled: true
        udf:
          defaultLegacyUdf: false
          enabled: true
          udfRoot: /opt/spinnaker/config/udf
      deck:
        settings-local.js: |
          window.spinnakerSettings.feature.kubernetesRawResources = true;
          window.spinnakerSettings.feature.kustomizeEnabled = true;
          window.spinnakerSettings.feature.artifactsRewrite = true;
          window.spinnakerSettings.feature.functions = true;
          window.spinnakerSettings.kubernetesAdHocInfraWritesEnabled = true;
          window.spinnakerSettings.authEnabled = true;
          window.spinnakerSettings.feature.terraform = true;
          window.spinnakerSettings.feature.managedServiceAccounts = true;
          
      dinghy:
        Logging:
          Level: INFO
      echo:
        scheduler:
          enabled: true
          pipelineConfigsPoller:
            enabled: true
        resilience4j.circuitbreaker:
          instances:
            telemetry:
              registerHealthIndicator: false
        sql:
          enabled: true
          connectionPool:
            jdbcUrl: jdbc:mysql://mysql:3306/echo
            password: password
            user: root
          migration:
            jdbcUrl: jdbc:mysql://mysql:3306/echo
            password: password
            user: root
      front50:
        spinnaker.s3.enabled: false
        sql:
          enabled: true
          connectionPools:
            default:
              default: true
              jdbcUrl: jdbc:mysql://mysql:3306/front50
              password: password
              user: root
          migration:
            jdbcUrl: jdbc:mysql://mysql:3306/front50
            password: password
            user: root
      gate:
        armory:
          cloud:
            enabled: false
        security:
          oauth2:
            resource:
              userInfoUri: https://dev-200769.okta.com/oauth2/default/v1/userinfo
            client:
              accessTokenUri: https://dev-200769.okta.com/oauth2/default/v1/token
              clientId: 0oa9htg5c5Kv1ZEAK4x7
              clientSecret: encrypted:k8s!n:auth-credentials!k:clientSecret
              scope: groups email profile openid
              userAuthorizationUri: https://dev-200769.okta.com/oauth2/default/v1/authorize
            userInfoMapping:
              email: email
              firstName: given_name
              lastName: family_name
              username: preferred_username
              roles: groups
        default:
          apiPort: 8085
        proxies:
          - id: terraform
            methods:
              - GET
            uri: http://spin-terraformer:7088
        server:
          servlet:
            context-path: /api/v1
          tomcat:
            httpsServerPort: X-Forwarded-Port
            internalProxies: .*
            protocolHeader: X-Forwarded-Proto
            remoteIpHeader: X-Forwarded-For
        spinnaker:
          extensibility:
            repositories:
              pluginRepository:
                url: https://raw.githubusercontent.com/armory-plugins/pluginRepository/master/repositories.json
              observabilityy-plugin:
                url: https://raw.githubusercontent.com/armory-plugins/armory-observability-plugin-releases/master/repositories.json
            deck-proxy:
              enabled: true
              plugins:
                Armory.EvaluateArtifactsPlugin:
                  enabled: true
                  version: 0.1.1
                Aws.LambdaDeploymentPlugin:
                  enabled: true
                  version: 1.0.9
            plugins:
              Armory.ObservabilityPlugin:
                enabled: true
                version: 1.5.0
                config.metrics:
                  prometheus:
                    enabled: true
                    meterRegistryConfig:
                      armoryRecommendedFiltersEnabled: false
              Armory.ArmoryHeader:
                enabled: true
                version: 0.2.2
              Armory.InstanceRegistration:
                enabled: false
      igor:
        locking:
          enabled: true
        spinnaker:
          pollingSafeguard:
            itemUpperThreshold: 10000
      orca:
        webhook:
          preconfigured:
          - label: KNative Notification
            type: knative
            enabled: true
            description: Send to KNative a CDEvents
            method: POST
            url: https://localhost:8090/default/events-broker
            parameters:
            - label: Subject for Event
              name: subject
              description: The CdEvent is going to get this subject
              type: string
            - label: 
              name: URL of requesting pipeline
              description: The URL to the execution id of the pipeline
              type: string
            - label: Context
              name: context
              description: The context to make this make sense
              type: string
            customHeaders:
              Ce-Type: cd.artifact.packaged.v1
            payload: |-
              {
                "id": "${parameterValues['subject']}",
                "url": "${parameterValues['url']}",
                "name": "${parameterValues['context']}"
              }
        tasks:
          useManagedServiceAccounts: true
        executionRepository:
          redis:
            enabled: false
          sql:
            enabled: true
        monitor:
          activeExecutions:
            redis: false
        sql:
          connectionPool:
            connectionTimeout: 5000
            jdbcUrl: jdbc:mysql://mysql:3306/orca
            maxLifetime: 30000
            maxPoolSize: 50
            password: password
            user: root
          enabled: true
          migration:
            jdbcUrl: jdbc:mysql://mysql:3306/orca
            password: password
            user: root
      spinnaker:
        armory:
          policyEngine:
            ## Allows for things to pass when no policy is explicitly set
            failOpen: true
            opa:
              enabled: true
              baseUrl: http://localhost:8181/v1/data
              timeoutSeconds: 20
        artifact-store:
          enabled: true
          type: s3
          helm:
            expandOverrides: true
          s3:
            enabled: true
            bucket: artifact-store
            region: local
            url: http://minio:9000
            accessKey: minio
            secretKey: secretKey
        management:
          endpoints.web:
            exposure.include: "*"
        server:
          http2:
            enabled: false 
          max-http-header-size: 512KB
          compression: 
            mime-types: text/html, text/xml, text/plain, text/css, text/javascript, application/javascript, application/json
            enabled: true
            min-response-size: 4096
        default:
          cipherSuites:
            - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
            - TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
            - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
            - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
            - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
            - TLS_AES_256_GCM_SHA384
            - TLS_CHACHA20_POLY1305_SHA256
            - TLS_AES_128_GCM_SHA256
          tlsVersions:
            - TLSv1.2
            - TLSv1.3
        logging:
          level:
            com.amazonaws.latency: WARN
            com.netflix.spinnaker.clouddriver.cache: WARN
            com.netflix.spinnaker.clouddriver.kubernetes.OpaDeployDescriptionValidator: DEBUG
            io.armory.spinnaker.front50.validator.validator.OpenPolicyAgentValidator: INFO
        ok-http-client:
          connectTimeoutMs: 15000
          maxRequests: 256
          maxRequestsPerHost: 256
          readTimeoutMs: 60000
        spinnaker:
          extensibility:
            deck-proxy:
              enabled: true
              plugins:
                Armory.PolicyEngine:
                  enabled: true
                  version: 0.3.0
                Armory.ArmoryHeader:
                  enabled: true
                  version: 0.2.2
            plugins:
              Armory.PolicyEngine:
                enabled: true
                version: 0.3.0
            repositories:
              opa:
                url: https://raw.githubusercontent.com/armory-plugins/policy-engine-releases/master/repositories.json
      terraformer:
        redis:
          host: spin-redis
          port: 6379
    service-settings:
      deck:
        kubernetes:
          useExecHealthCheck: false
      clouddriver:
        env:
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
          OTEL_TRACES_EXPORTER: none
          OTEL_LOGS_EXPORTER: none
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS:  -XX:+UseTransparentHugePages -XX:+AlwaysPreTouch  -XX:MaxRAMPercentage=50.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Dotel.service.name=clouddriver-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          useExecHealthCheck: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7002
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7002
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7002
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
      dinghy:
        kubernetes:
          useExecHealthCheck: false
      echo:
        env:
          OTEL_TRACES_EXPORTER: none
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
          OTEL_LOGS_EXPORTER: none
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS:  -XX:+UseTransparentHugePages -XX:+AlwaysPreTouch  -XX:MaxRAMPercentage=75.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -Dotel.service.name=echo-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          useExecHealthCheck: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8089
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 180
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8089
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
      fiat:
        env:
          OTEL_TRACES_EXPORTER: none
          OTEL_LOGS_EXPORTER: none
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS:  -XX:+UseTransparentHugePages -XX:+AlwaysPreTouch -XX:MaxRAMPercentage=75.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -Dotel.service.name=fiat-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          useExecHealthCheck: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7003
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 180
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7003
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7003
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
      front50:
        env:
          OTEL_TRACES_EXPORTER: none
          OTEL_LOGS_EXPORTER: none
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS:  -XX:+UseTransparentHugePages -XX:+AlwaysPreTouch -XX:MaxRAMPercentage=75.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -Dotel.service.name=front50-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 180
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          useExecHealthCheck: false
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
      gate:
        env:
          OTEL_TRACES_EXPORTER: none
          OTEL_LOGS_EXPORTER: none
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: false
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS:  -XX:+UseTransparentHugePages -XX:+AlwaysPreTouch -XX:MaxRAMPercentage=75.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -Dotel.service.name=gate-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          useExecHealthCheck: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/health
              port: 8084
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 180
            failureThreshold: 3
            httpGet:
              path: /api/v1/health
              port: 8084
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/health
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
      igor:
        env:
          OTEL_TRACES_EXPORTER: none
          OTEL_LOGS_EXPORTER: none
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS:  -XX:+UseTransparentHugePages -XX:+AlwaysPreTouch -XX:MaxRAMPercentage=75.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -Dotel.service.name=igor-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          livenessProbe:
            initialDelaySeconds: 60
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8088
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 80
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8088
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8088
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
          useExecHealthCheck: false
      kayenta:
        env:
          OTEL_TRACES_EXPORTER: none
          OTEL_LOGS_EXPORTER: none
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS:  -XX:+UseTransparentHugePages -XX:+AlwaysPreTouch -XX:MaxRAMPercentage=75.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -Dotel.service.name=kayenta-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          useExecHealthCheck: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 180
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8090
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8090
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
      orca:
        env:
          OTEL_TRACES_EXPORTER: none
          OTEL_LOGS_EXPORTER: none
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS:  -XX:+UseTransparentHugePages -XX:+AlwaysPreTouch -XX:MaxRAMPercentage=75.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -Dotel.service.name=orca-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8083
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 180
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8083
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8083
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          useExecHealthCheck: false
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
      rosco:
        env:
          OTEL_TRACES_EXPORTER: none
          OTEL_LOGS_EXPORTER: none
          OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
          OTEL_EXPORTER_OTLP_ENDPOINT: http://opentelemetrycollector:4318
          JAVA_OPTS: -XX:+UseTransparentHugePages -XX:MaxRAMPercentage=40.0 -XX:+UnlockExperimentalVMOptions -XX:+UseZGC  -Dotel.service.name=rosco-jasonmcintosh -javaagent:/opt/apmagent/javaagent.jar
        kubernetes:
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8087
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 180
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8087
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8087
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          useExecHealthCheck: false
          volumes:
          - id: shared-volume
            mountPath: /opt/apmagent
            type: emptyDir
      terraformer:
        kubernetes:
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7088
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            initialDelaySeconds: 180
            failureThreshold: 3
            httpGet:
              path: /health
              port: 7088
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            fsGroup: 1000
            runAsGroup: 1000
            runAsUser: 1000
          useExecHealthCheck: false
